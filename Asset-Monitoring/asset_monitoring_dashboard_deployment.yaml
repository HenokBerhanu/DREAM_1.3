# =====================================
# Namespace (if not already present)
apiVersion: v1
kind: Namespace
metadata:
  name: microservices
---
# Dashboard Config (externalised values)
apiVersion: v1
kind: ConfigMap
metadata:
  name: dashboard-config
  namespace: microservices
  labels:
    app: asset-monitoring-dashboard
data:
  KAFKA_BOOTSTRAP: "kafka-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092"
  ALERT_TOPIC: "telemetry-alerts"
  SEC_AGENT_URL: "http://security-enforcement-agent.edge-agents.svc.cluster.local:5005/api/flows"
---
# Asset‑Monitoring Dashboard Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: asset-monitoring-dashboard
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: asset-monitoring-dashboard
  template:
    metadata:
      labels:
        app: asset-monitoring-dashboard
    spec:
      nodeSelector:
        kubernetes.io/hostname: cloudnode   # keep it in cloud with Flannel CNI
      containers:
      - name: dashboard
        image: henok28/asset-monitoring-dashboard:v1.3
        imagePullPolicy: Always
        envFrom:
        - configMapRef:
            name: dashboard-config
        ports:
        - containerPort: 5003
          name: http
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 250m
            memory: 128Mi
        startupProbe:
          httpGet:
            path: /metrics
            port: http  
          failureThreshold: 18
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /metrics
            port: http
          initialDelaySeconds: 20
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /metrics
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
---
# Service – expose inside cluster & on host
apiVersion: v1
kind: Service
metadata:
  name: asset-monitoring-dashboard
  namespace: microservices
spec:
  type: NodePort
  selector:
    app: asset-monitoring-dashboard
  ports:
  - name: http
    port: 80
    targetPort: 5003
    nodePort: 32003   # => http://<cloudnode‑IP>:32003/
---
# =====================================
# Grafana (lightweight, in‑memory)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      nodeSelector:
        kubernetes.io/hostname: cloudnode
      containers:
      - name: grafana
        image: grafana/grafana-oss:10.4.2
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "grafana"
        - name: KAFKA_BOOTSTRAP
          value: "kafka-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092"
        - name: ALERT_TOPIC
          value: "telemetry-alerts"
        - name: SEC_AGENT_URL
          value: "http://security-enforcement-agent.edge-agents.svc.cluster.local:5005/api/flows"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
      volumes:
      - name: grafana-storage
        emptyDir: {}   # switch to PVC for persistence
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: microservices
spec:
  type: NodePort
  selector:
    app: grafana
  ports:
  - port: 80
    targetPort: 3000
    nodePort: 32030  # => http://<cloudnode‑IP>:32030/