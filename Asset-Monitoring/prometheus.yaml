---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-server-conf
  namespace: microservices
data:
  prometheus.yml: |-
    global:
      scrape_interval:     15s
      evaluation_interval: 15s

    scrape_configs:
      # 1️⃣ Kubernetes API-servers
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names: [kube-system]
        relabel_configs:
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            regex: https
            action: keep

      # 2️⃣ Security Enforcement Agent (via annotations on the DaemonSet pods)
      - job_name: 'security-enforcement-agent'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names: [edge-agents]
        relabel_configs:
          # only pods annotated prometheus.io/scrape="true"
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            regex: 'true'
            action: keep
          # combine pod IP and annotation port into the scrape target
          - source_labels: [__address__,__meta_kubernetes_pod_annotation_prometheus_io_port]
            regex: '(.+);(.+)'
            replacement: '$1:$2'
            target_label: __address__
          # pick up the annotation path (default /metrics)
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            target_label: __metrics_path__

      # 3️⃣ Prometheus’s own metrics
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      nodeSelector:
        kubernetes.io/hostname: cloudnode
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          args:
            - --config.file=/etc/prometheus/prometheus.yml
            - --storage.tsdb.path=/prometheus
            - --web.enable-lifecycle
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: config
              mountPath: /etc/prometheus
            - name: data
              mountPath: /prometheus
      volumes:
        - name: config
          configMap:
            name: prometheus-server-conf
        - name: data
          emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-server
  namespace: microservices
  labels:
    app: prometheus
spec:
  type: ClusterIP
  ports:
    - port: 9090
      targetPort: 9090
  selector:
    app: prometheus
